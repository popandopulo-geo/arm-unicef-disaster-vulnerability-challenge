import torch
import gc
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.models.detection.backbone_utils import resnet_fpn_backbone
from torchvision.models.detection.faster_rcnn import FasterRCNN
from torchvision.models.detection.backbone_utils import BackboneWithFPN
import timm

def my_resnet_fpn_backbone(backbone_name, pretrained):
    backbone = timm.create_model(backbone_name, pretrained=pretrained)
    for name, parameter in backbone.named_parameters():
        if 'layer2' not in name and 'layer3' not in name and 'layer4' not in name:
            parameter.requires_grad_(False)

    return_layers = {'layer1': '0', 'layer2': '1', 'layer3': '2', 'layer4': '3'}

    in_channels_stage2 = backbone.inplanes // 8
    in_channels_list = [
        in_channels_stage2,
        in_channels_stage2 * 2,
        in_channels_stage2 * 4,
        in_channels_stage2 * 8,
    ]
    out_channels = 256
    return BackboneWithFPN(backbone, return_layers, in_channels_list, out_channels)

def fasterrcnn_resnet_fpn(backbone_name='resnet152', progress=True, num_classes=91, weights=None, pretrained_backbone=True, **kwargs):
    if backbone_name == 'resnet50':
        model = fasterrcnn_resnet50_fpn(weights=weights)
    else:
        if backbone_name in ['resnet101', 'resnet152']:
            backbone = resnet_fpn_backbone(backbone_name, pretrained_backbone)
        else:
            backbone = my_resnet_fpn_backbone(backbone_name, pretrained_backbone)
        model = FasterRCNN(backbone, num_classes, **kwargs)
    return model