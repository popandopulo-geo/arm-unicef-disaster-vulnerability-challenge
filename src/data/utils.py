import torch 

def collate_fn(batch):
    return tuple(zip(*batch))

def collate_fn_detr(processor):
    def collate_fn(batch):
        features = [item[0] for item in batch]
        targets  = [item[1] for item in batch]
        rgbs     = [item[2] for item in batch]
        nd_masks = [item[3] for item in batch]

        # features_padded = processor.pad(features, return_tensors="pt")
        # rgbs_padded = processor.pad(features, return_tensors="pt")
        # masks_padded = processor.pad(features, return_tensors="pt")

        return torch.stack(features), targets, torch.stack(rgbs), nd_masks
    return collate_fn

def parse_coco_annotation(annotation):
    return [[obj[key] for obj in annotation] for key in ['category_id', 'bbox']]

def to_coco_annotation(image_id, bboxes, categories):
    annotation = []

    for i, (category, bbox) in enumerate(zip(categories, bboxes)):
        obj = {
            'id': i,
            'image_id': image_id,
            'category_id': category,
            'bbox': bbox,
            'area': bbox[2] * bbox[3],
            'iscrowd': 0,
            'segmentation': []
        }

        annotation.append(obj)

    return annotation